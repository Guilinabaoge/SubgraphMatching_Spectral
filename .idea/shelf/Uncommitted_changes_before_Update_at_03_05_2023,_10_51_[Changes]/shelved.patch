Index: matching/main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\n// Created by zhiwei zeng on 25/02/2023.\n//\n#include <chrono>\n#include <future>\n#include <thread>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <cmath>\n\n#include \"matchingcommand.h\"\n#include \"graph/graph.h\"\n#include \"FilterVertices.h\"\n#include \"IO.h\"\n#include \"eigenHelper.h\"\n#include \"Experiments.h\"\n#include \"StudyPerformance.h\"\n\ndouble round_to(double value, double precision = 1.0)\n{\n    return std::round(value / precision) * precision;\n}\n\npair<matching_algo_outputs,matching_algo_outputs> fakeMatchingWrapper(queryMeta meta,string filter){\n    matching_algo_outputs original = Experiments::experiment3(meta.data_graph_path,meta.query_path,filter,\"0\",NULL);\n    ui* fake_pointer = new ui[stoi(meta.query_size)];\n    for (int i =0; i<stoi(meta.query_size);i++){\n        ui order = original.matching_order[i];\n        *&fake_pointer[i] = order;\n    }\n    matching_algo_outputs enhanced = Experiments::experiment3(meta.data_graph_path,meta.query_path,filter,\"1\",fake_pointer);\n    delete[] fake_pointer;\n    return pair(original,enhanced);\n}\n\npair<matching_algo_outputs,matching_algo_outputs> MatchingWrapper(string datagraph,string querygraph,string filter){\n    matching_algo_outputs original = Experiments::experiment3(datagraph,querygraph,filter,\"0\",NULL);\n    matching_algo_outputs enhanced = Experiments::experiment3(datagraph,querygraph,filter,\"1\",NULL);\n    return pair(original,enhanced);\n}\n\n\n\n\nvoid exact_eval(string dataset,string querysize,string querynumber,string property){\n    Experiments::datagraphEigenMatrix = dataset+\".csv\";\n    queryMeta meta;\n    meta.dataset = dataset;\n    meta.query_property = property;\n    meta.query_size = querysize;\n    meta.query_number = querynumber;\n\n    std::ostringstream data;\n    data << \"../../test/reallife_dataset/\" << meta.dataset << \"/data_graph/\" << meta.dataset << \".graph\";\n    meta.data_graph_path = data.str();\n\n    std::ostringstream query;\n//    query << \"../../test/reallife_dataset/\" << meta.dataset << \"/query_graph/query_\" << meta.query_property << \"_\"\n//          << meta.query_size << \"_\" << meta.query_number << \".graph\";\n    query<<\"../../test/large_query/test.graph\";\n    meta.query_path = query.str();\n\n    pair <matching_algo_outputs,matching_algo_outputs> LDF = fakeMatchingWrapper(meta,\"LDF\");\n    pair <matching_algo_outputs,matching_algo_outputs> NLF = fakeMatchingWrapper(meta,\"NLF\");\n    pair <matching_algo_outputs,matching_algo_outputs> GQL = fakeMatchingWrapper(meta,\"GQL\");\n    pair <matching_algo_outputs,matching_algo_outputs> TSOF = fakeMatchingWrapper(meta,\"TSO\");\n    pair <matching_algo_outputs,matching_algo_outputs> CFL = fakeMatchingWrapper(meta,\"CFL\");\n    pair <matching_algo_outputs,matching_algo_outputs> DPiso = fakeMatchingWrapper(meta,\"DPiso\");\n    matching_algo_outputs KF = Experiments::experiment3(meta.data_graph_path,meta.query_path,\"KF\",\"0\",NULL);\n\n    vector<pair<matching_algo_outputs,matching_algo_outputs>> evaluations;\n    evaluations.push_back(LDF);\n    evaluations.push_back(NLF);\n    evaluations.push_back(GQL);\n    evaluations.push_back(TSOF);\n    evaluations.push_back(CFL);\n    evaluations.push_back(DPiso);\n\n\n    std::ostringstream oss;\n    oss <<meta.query_property<<\"_\"<<meta.query_size<<\"_\"<<meta.query_number;\n\n    for(auto &eval : evaluations){\n        oss<<\",\"<<eval.first.call_count<<\",\"<<eval.second.call_count;\n    }\n    oss<<\",\"<<KF.call_count\n    <<\",\"<<LDF.first.enumOutput.embedding_cnt;\n\n    for(auto &eval : evaluations){\n        oss<<\",\"<<eval.first.total_time<<\",\"<<eval.second.total_time;\n    }\n    oss<<\",\"<<KF.total_time<<\",\"<<LDF.first.enumOutput.embedding_cnt;\n\n    for(auto &eval : evaluations){\n        oss<<\",\"<<eval.first.candidate_count_sum<<\",\"<<eval.second.candidate_count_sum;\n    }\n    oss<<\",\"<<KF.candidate_count_sum;\n    for(auto &eval : evaluations){\n        oss<<\",\"<<eval.first.matching_order_string<<\",\"<<eval.second.matching_order_string;\n    }\n    oss<<\",\"<<KF.matching_order_string;\n    for(auto &eval : evaluations){\n        oss<<\",\"<<eval.first.preprocessing_time<<\",\"<<eval.second.preprocessing_time;\n    }\n    oss<<\",\"<<KF.preprocessing_time;\n    for(auto &eval : evaluations){\n        oss<<\",\"<<eval.first.enumeration_time<<\",\"<<eval.second.enumeration_time;\n    }\n    oss<<\",\"<<KF.enumeration_time;\n\n\n    std::string var = oss.str();\n\n    cout<<var<<endl;\n\n    string file_path = \"\";\n    if(property==\"sparse\"){\n        file_path = \"performance_experiment/\"+dataset+\"_\"+\"s\"+querysize+\".csv\";\n    }\n    if(property==\"dense\"){\n        file_path = \"performance_experiment/\"+dataset+\"_\"+\"d\"+querysize+\".csv\";\n    }\n\n    std::ofstream myfile;\n    myfile.open (file_path,std::ios_base::app);\n    myfile<<var<<\"\\n\";\n    myfile.close();\n\n}\n\nvoid generate_datagraph_eigenvector(string data_graph_path,string csvfilename,int size){\n    Graph* data_graph = new Graph(true);\n    data_graph->loadGraphFromFile(data_graph_path);\n\n    MatrixXd datagraph_eigenvalue(data_graph->getVerticesCount(), size);\n    cout<<\"Start compute eigen value\"<<endl;\n    MTcalc12(data_graph,data_graph->getGraphMaxDegree(),datagraph_eigenvalue,true,size);\n    saveData(csvfilename, datagraph_eigenvalue);\n\n}\n\nvoid fixed_order_experiment(int argc, char** argv){\n\n    //    generate_datagraph_eigenvector(\"../../test/reallife_dataset/eu2005/data_graph/eu2005.graph\",\"eu2005.csv\");\n\n    //yeast,hprd,uspatents,youtube,dblp,eu2005,\n    vector<string> query_size_dense_1 = {\"4\",\"8\",\"16\",\"24\",\"32\"};\n    vector<string> query_size_sparse_1 = {\"8\",\"16\",\"24\",\"32\"};\n\n    //human,wordnet\n    vector<string> query_size_dense_2 = {\"4\",\"8\",\"12\",\"16\",\"20\"};\n    vector<string> query_size_sparse_2 = {\"8\",\"12\",\"16\",\"20\"};\n\n    MatchingCommand command(argc,argv);\n    string dataset_name = command.getDatasetName();\n    string query_size = command.getQuerySize();\n    string query_number = command.getQueryNumber();\n    string query_property = command.getQueryProperty();\n\n    cout<<dataset_name<<endl;\n    cout<<query_size<<endl;\n    cout<<query_number<<endl;\n    cout<<query_property<<endl;\n\n    exact_eval(dataset_name,query_size,query_number,query_property);\n}\n\nint main(int argc, char** argv) {\n//    generate_datagraph_eigenvector(\"../../test/reallife_dataset/wordnet/data_graph/wordnet.graph\",\"wordnet.csv\",35);\n    Experiments::datagraphEigenMatrix = \"youtube.csv\";\n\n\n    //Query_Name,LDF,LDF+EF,NLF,NLF+EF,GQL,GQL+EF,TSOF,TSOF+EF,CFL,CFL+EF,DPiso,DPiso+EF,KF\n//    string querygraph = \"../../test/reallife_dataset/wordnet/query_graph/query_dense_16_1.graph\";\n\n    MatchingCommand command(argc,argv);\n    string dataset_name = command.getDatasetName();\n    string query_size = command.getQuerySize();\n    string query_number = command.getQueryNumber();\n    string query_property = command.getQueryProperty();\n\n//    cout<<dataset_name<<endl;\n//    cout<<query_size<<endl;\n//    cout<<query_number<<endl;\n//    cout<<query_property<<endl;\n\n    string datagraph = \"../../test/reallife_dataset/youtube/data_graph/youtube.graph\";\n    string querygraph = \"query_dense_32_1.graph\";\n\n//    string datagraph = \"../../test/reallife_dataset/wordnet/data_graph/wordnet.graph\";\n//    string querygraph = \"../../test/large_query/\"+dataset_name+\"/\"+query_property+\"/\"+query_property+\"_\"+query_number+\".graph\";\n\n//    string datagraph = \"../../test/mydataset/youtube/data_graph/25-0/youtube.graph\";\n//    string querygraph = \"../../test/mydataset/youtube/query_graph/25-0/query_\"+query_property+\"_\"+query_size+\"_\"+query_number+\".graph\";\n\n\n//    pair <matching_algo_outputs,matching_algo_outputs> LDF = MatchingWrapper(datagraph,querygraph,\"LDF\");\n\n    matching_algo_outputs original = Experiments::experiment3(datagraph,querygraph,\"NLF\",\"0\",NULL);\n//    matching_algo_outputs enhanced = Experiments::experiment3(datagraph,querygraph,\"NLF\",\"1\",NULL);\n    return 0;\n\n//    pair <matching_algo_outputs,matching_algo_outputs> NLF = MatchingWrapper(datagraph,querygraph,\"NLF\");\n//    pair <matching_algo_outputs,matching_algo_outputs> GQL = MatchingWrapper(datagraph,querygraph,\"GQL\");\n//    pair <matching_algo_outputs,matching_algo_outputs> TSOF = MatchingWrapper(datagraph,querygraph,\"TSO\");\n//    pair <matching_algo_outputs,matching_algo_outputs> CFL = MatchingWrapper(datagraph,querygraph,\"CFL\");\n//    pair <matching_algo_outputs,matching_algo_outputs> DPiso = MatchingWrapper(datagraph,querygraph,\"DPiso\");\n//    matching_algo_outputs KF = Experiments::experiment3(datagraph,querygraph,\"KF\",\"0\",NULL);\n//\n//    vector<pair<matching_algo_outputs,matching_algo_outputs>> evaluations;\n//    evaluations.push_back(LDF);\n//    evaluations.push_back(NLF);\n//    evaluations.push_back(GQL);\n//    evaluations.push_back(TSOF);\n//    evaluations.push_back(CFL);\n//    evaluations.push_back(DPiso);\n//\n//    std::ostringstream oss;\n//    oss <<query_property<<\"_\"<<query_size<<\"_\"<<query_number;\n//\n//    for(auto &eval : evaluations){\n//        oss<<\",\"<<eval.first.call_count<<\",\"<<eval.second.call_count;\n//    }\n//    oss<<\",\"<<KF.call_count\n//       <<\",\"<<LDF.first.enumOutput.embedding_cnt;\n//\n//    for(auto &eval : evaluations){\n//        oss<<\",\"<<eval.first.total_time<<\",\"<<eval.second.total_time;\n//    }\n//    oss<<\",\"<<KF.total_time<<\",\"<<LDF.first.enumOutput.embedding_cnt;\n//\n//    for(auto &eval : evaluations){\n//        oss<<\",\"<<eval.first.candidate_count_sum<<\",\"<<eval.second.candidate_count_sum;\n//    }\n//    oss<<\",\"<<KF.candidate_count_sum;\n//    for(auto &eval : evaluations){\n//        oss<<\",\"<<eval.first.matching_order_string<<\",\"<<eval.second.matching_order_string;\n//    }\n//    oss<<\",\"<<KF.matching_order_string;\n//    for(auto &eval : evaluations){\n//        oss<<\",\"<<eval.first.preprocessing_time<<\",\"<<eval.second.preprocessing_time;\n//    }\n//    oss<<\",\"<<KF.preprocessing_time;\n//    for(auto &eval : evaluations){\n//        oss<<\",\"<<eval.first.enumeration_time<<\",\"<<eval.second.enumeration_time;\n//    }\n//    oss<<\",\"<<KF.enumeration_time;\n//\n//\n//    std::string var = oss.str();\n//\n//    cout<<var<<endl;\n//\n//    string file_path = \"\";\n////    file_path = \"performance_experiment/test.csv\";\n//    file_path = \"performance_experiment/\"+dataset_name+\"_\"+query_property+query_size+\".csv\";\n//\n////    file_path = \"performance_experiment/mydataset_lesslabels/\"+dataset_name+\"/25-0/\"+query_property+query_size+\".csv\";\n//\n//\n//    std::ofstream myfile;\n//    myfile.open (file_path,std::ios_base::app);\n//    myfile<<var<<\"\\n\";\n//    myfile.close();\n//\n//    return 0;\n//\n}\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/matching/main.cpp b/matching/main.cpp
--- a/matching/main.cpp	(revision 3b07663884e49a78926b62b0f14c536d9582d8c2)
+++ b/matching/main.cpp	(date 1683103716114)
@@ -188,7 +188,7 @@
 //    cout<<query_property<<endl;
 
     string datagraph = "../../test/reallife_dataset/youtube/data_graph/youtube.graph";
-    string querygraph = "query_dense_32_1.graph";
+    string querygraph = "test_query_dense_4_1.graph";
 
 //    string datagraph = "../../test/reallife_dataset/wordnet/data_graph/wordnet.graph";
 //    string querygraph = "../../test/large_query/"+dataset_name+"/"+query_property+"/"+query_property+"_"+query_number+".graph";
